week2 (2真的是秃/(ㄒoㄒ)/~~)

第二周的主要修改操作还是在response.c 文件中

首先判断parse返回NULL 是否为NULL ,是即为bad request 
给client返回 400 bad request
### 重点
parse 函数 返回NULL , 说明yyac 在分解指令时就出错退出了
此时缓冲池里面还有数据,需要执行yylex_destroy 函数来清空
否则会影响下一次运行的请求（就因为这个问题被卡了老久老久(;´༎ຶД༎ຶ`) ）

第二步判断request-http_version 是否为 HTTP/1.1 
不是的话返回 505 http version not supported
是则继续进行下一步

第三步就是判断request-method是为GET ,HEAD ,POST
是其中某一个就 做相应的判断
否则返回 501 not Implemented

对于上一步三者中的其中某一个
GET :

先判断request-uri,为空（即为"/"时）,需要返回的是默认网页static_site/index.html
否则,将传进来的uri作为先对路径,打开文件,能打开则读取文件内容作为实体返回,且附带200 OK
打不开时返回 404 not found

HEAD :
直接返回 200 OK 即可,带不带header都可以

POST :
原模原样返回从client 接受到的消息

附1:
当request 头部文件大于8192时,不进行parse,直接返回parsing failed ,
此操作在 parse.c 文件中 , 在从buf 到 buffer 匹配头部是加一个条件即可

附2: 关于 log
此处有两个log 设计
    第一个也不能严格来说是log,就是一些直接输出到终端的稍微具有统一格式的信息
        Log 为一般的输出信息（附带路径，行数和所在函数）输出为绿色
        Log_er 为错误类型的输出 附带信息同上，输出为红色
    第二个是输出到 log.txt 的 80% 按照 apache 的日志格式输出的 log
        Access_Log 输出信息为 client ip,指令运行时刻的时间,收到的请求的信息,返回的信息代码和行数
        Access_LOG_Null 为 Access_Log 的特殊情况，即 bad request ，没有收到的请求信息
        Error_Log 错误情况,输出信息为client ip,时间,错误类型,错误发生的文件,行数,及函数信息以及附带信息

* : 跟其他人的设计不同,此处仿照 nemu中的log 方法，把函数设计成了宏定义（虽然但是可能没有函数好懂）

使用 log to terminal 和 log to file 两个宏定义来控制 这些,不想要的时候可以一个注释搞定,比函数方便一些


